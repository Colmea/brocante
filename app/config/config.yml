imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    #translator:      { fallback: "%locale%" }
    translator: ~
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: "%kernel.root_dir%/data/data.db3"
        # path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

# FOS User Configuration
fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: main
    user_class: Brocante\Bundle\UserBundle\Entity\User

# Sonata Admin Configuration
sonata_admin:
    title:      Administration Brocante
    title_logo: http://www.scoutgouvy.be/imagesite/mouvement_rvb.jpg
    dashboard:
        blocks:
            -
                position: left
                type: sonata.admin.block.admin_list
            -
                position: right
                type: sonata.block.service.text
                settings:
                    content: >
                        <h2>Procédure des réservations</h2>
                        <p>Vérifier les informations suivantes :<br>
                        <ul>
                        <li>Nom et prénom</li>
                        <li>Adresse mail ou adresse privée</li>
                        <li>Numéros de téléphone (facultatif)</li>
                        <li>Nombre d’emplacements <strong>OU</strong> Emplacements voulus (facultatif)</li>
                        </ul>
                        Lors de l’encodage des emplacements si la personne veut des emplacements spécifiques il faut absolument les encodé dans le programme.<br>
                        Si la personne ne veut pas d’emplacement spécifique mais veut être dans une certaines zone, il faut serrer le plus possible les emplacements.<br><br>
                        Après avoir poussé sur le bouton "Créer", un mail est envoyé automatiquement à la personne avec toutes les informations relatives au payement.</p>
        groups:
            Brocante:
                items:
                    - sonata.admin.participant
                    - sonata.admin.emplacement
                    - sonata.admin.zone

# Sonata Block Configuration
sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        sonata.admin_doctrine_orm.block.audit:
            contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:

